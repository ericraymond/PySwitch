[
    {
        "client": "kemper",
        "actions": [
            {
                "name": "RIG_VOLUME_BOOST",
                "parameters": [
                    {
                        "name": "boost_volume",
                        "default": null,
                        "comment": "Boost volume: A value in range [0..1] (corresponding to the range of the\nrig volume parameter of the Kemper. Some examples: 0.5 is 0dB, 0.625 is +3dB, 0.75 is +6dB, 1.0 is +12dB"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "mode",
                        "default": "PushButtonAction.HOLD_MOMENTARY",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.PINK",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"RigBoost\"",
                        "comment": null
                    },
                    {
                        "name": "remember_off_value",
                        "default": "True",
                        "comment": "If set, the boost will return to the former rig volume at disabling"
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Volume boost function, based on setting rig volume to a certain boost value.",
                "importPath": "pyswitch.clients.kemper.actions.rig_volume_boost"
            },
            {
                "name": "ENCODER_RIG_TRANSPOSE",
                "parameters": [
                    {
                        "name": "accept_action",
                        "default": "None",
                        "comment": "Action to acknowledge the entered value. If None, the encoder directly sets values as you turn it. \nIf you pass an Encoder Button action, the value will just be displayed and the MIDI command to set \nit will be sent when the Button action is triggered.\n\nIf you use this, you will also need a preview display label (see below)"
                    },
                    {
                        "name": "cancel_action",
                        "default": "None",
                        "comment": "Action to cancel a preselection (only makes sense with accept_action set). Must be of type Encoder Button, too."
                    },
                    {
                        "name": "preview_display",
                        "default": "None",
                        "comment": "If assigned, the adjusted value will be displayed in the passed DisplayLabel when the encoder is adjusted. \n\nThis just makes sense in conjunction with an accept action (see above)."
                    },
                    {
                        "name": "preview_blink_color",
                        "default": "(200, 200, 200)",
                        "comment": "Alternative color to be used when blinking."
                    },
                    {
                        "name": "preview_timeout_millis",
                        "default": "1500",
                        "comment": "This is the amount of time (milliseconds) after which the \npreview display will return to its normal state."
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Adjusts the global rig transpose value.",
                "importPath": "pyswitch.clients.kemper.actions.rig_transpose"
            },
            {
                "name": "AMP_GAIN",
                "parameters": [
                    {
                        "name": "step_width",
                        "default": "None",
                        "comment": "Increment/Decrement for one encoder step. Set to None for auto-detect (NRPN: 80, CC: 1)"
                    },
                    {
                        "name": "accept_action",
                        "default": "None",
                        "comment": "Action to acknowledge the entered value. If None, the encoder directly sets values as you turn it. \nIf you pass an Encoder Button action, the value will just be displayed and the MIDI command to set \nit will be sent when the Button action is triggered.\n\nIf you use this, you will also need a preview display label (see below)"
                    },
                    {
                        "name": "cancel_action",
                        "default": "None",
                        "comment": "Action to cancel a preselection (only makes sense with accept_action set). Must be of type Encoder Button, too."
                    },
                    {
                        "name": "preview_display",
                        "default": "None",
                        "comment": "If assigned, the adjusted value will be displayed in the passed DisplayLabel when the encoder is adjusted. \n\nThis just makes sense in conjunction with an accept action (see above)."
                    },
                    {
                        "name": "preview_timeout_millis",
                        "default": "1500",
                        "comment": "This is the amount of time (milliseconds) after which the \npreview display will return to its normal state."
                    },
                    {
                        "name": "preview_blink_color",
                        "default": "(200, 200, 200)",
                        "comment": "Alternative color to be used when blinking."
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Adjusts the amp gain with a rotary encoder.",
                "importPath": "pyswitch.clients.kemper.actions.amp"
            },
            {
                "name": "LOOPER_REC_PLAY_OVERDUB",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Rec\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.RED",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Looper: Play/Rec/Overdub",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "LOOPER_STOP",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Stop\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.WHITE",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Looper: Stop",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "LOOPER_ERASE",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Erase\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_RED",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Looper: Erase",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "LOOPER_CANCEL",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Undo\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.YELLOW",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Looper: Cancel",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "LOOPER_REVERSE",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Reverse\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_GREEN",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Looper: Reverse",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "LOOPER_TRIGGER",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Trigger\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_BLUE",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Trigger",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "LOOPER_HALF_SPEED",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"HalfSpd\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.ORANGE",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Looper: Half speed",
                "importPath": "pyswitch.clients.kemper.actions.looper"
            },
            {
                "name": "MORPH_BUTTON",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Morph\"",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "\"kemper\"",
                        "comment": "Can be \"kemper\" or a fixed color"
                    },
                    {
                        "name": "morph_color_base",
                        "default": "Colors.RED",
                        "comment": "Only used if color = \"kemper\". See MORPH_DISPLAY"
                    },
                    {
                        "name": "morph_color_morphed",
                        "default": "Colors.BLUE",
                        "comment": "Only used if color = \"kemper\". See MORPH_DISPLAY"
                    }
                ],
                "comment": "Morph button (faded change of morph state)",
                "importPath": "pyswitch.clients.kemper.actions.morph"
            },
            {
                "name": "MORPH_DISPLAY",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Morph\"",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "morph_color_base",
                        "default": "Colors.RED",
                        "comment": "Color used for the unmorphed state"
                    },
                    {
                        "name": "morph_color_morphed",
                        "default": "Colors.BLUE",
                        "comment": "Color used for the morphed state"
                    }
                ],
                "comment": "Morph state (display/LEDs only)",
                "importPath": "pyswitch.clients.kemper.actions.morph"
            },
            {
                "name": "ENCODER_BPM",
                "parameters": [
                    {
                        "name": "step_width",
                        "default": "None",
                        "comment": "Increment/Decrement for one encoder step. Set to None for auto-detect (NRPN: 80, CC: 1)"
                    },
                    {
                        "name": "accept_action",
                        "default": "None",
                        "comment": "Action to acknowledge the entered value. If None, the encoder directly sets values as you turn it. \nIf you pass an Encoder Button action, the value will just be displayed and the MIDI command to set \nit will be sent when the Button action is triggered.\n\nIf you use this, you will also need a preview display label (see below)"
                    },
                    {
                        "name": "cancel_action",
                        "default": "None",
                        "comment": "Action to cancel a preselection (only makes sense with accept_action set). Must be of type Encoder Button, too."
                    },
                    {
                        "name": "preview_display",
                        "default": "None",
                        "comment": "If assigned, the adjusted value will be displayed in the passed DisplayLabel when the encoder is adjusted. \n\nThis just makes sense in conjunction with an accept action (see above)."
                    },
                    {
                        "name": "preview_blink_color",
                        "default": "(200, 200, 200)",
                        "comment": "Alternative color to be used when blinking."
                    },
                    {
                        "name": "preview_timeout_millis",
                        "default": "1500",
                        "comment": "This is the amount of time (milliseconds) after which the \npreview display will return to its normal state."
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Adjusts the BPM tempo with a rotary encoder.",
                "importPath": "pyswitch.clients.kemper.actions.tempo_bpm"
            },
            {
                "name": "TAP_TEMPO",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.DARK_GREEN",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Tap tempo",
                "importPath": "pyswitch.clients.kemper.actions.tempo"
            },
            {
                "name": "SHOW_TEMPO",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "change_display",
                        "default": "None",
                        "comment": "If a display label is passed here, the BPM value will be shown there shortly when changed."
                    },
                    {
                        "name": "change_timeout_millis",
                        "default": "1500",
                        "comment": "If change_display is set, this determines how long the values shall be shown."
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_GREEN",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"{bpm} bpm\"",
                        "comment": "Text for the main label. Can contain a {bpm} token which is replaced with the current BPM value."
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "led_brightness",
                        "default": "0.02",
                        "comment": "LED brightness in range [0..1]"
                    }
                ],
                "comment": "Show tempo (blinks on every beat)",
                "importPath": "pyswitch.clients.kemper.actions.tempo"
            },
            {
                "name": "EFFECT_STATE",
                "parameters": [
                    {
                        "name": "slot_id",
                        "default": null,
                        "comment": null
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "mode",
                        "default": "PushButtonAction.HOLD_MOMENTARY",
                        "comment": null
                    },
                    {
                        "name": "show_slot_names",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Switch an effect slot on / off",
                "importPath": "pyswitch.clients.kemper.actions.effect_state"
            },
            {
                "name": "ENCODER_BANK_SELECT",
                "parameters": [
                    {
                        "name": "preview_display",
                        "default": "None",
                        "comment": "If assigned, the adjusted value will be displayed in the passed DisplayLabel when the encoder is adjusted. \n\nBank Preselect is always shown in the Rig Name/ID display, regardless of this option. However, the preselect display is not updated too often so it makes total sense to set your rig name display here, too."
                    },
                    {
                        "name": "step_width",
                        "default": "0.5",
                        "comment": "Step width. Can be set to any value greater than 0 (including float values)."
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Preselects the bank with a rotary encoder. \n\nAfter this, the bank change will be done after a rig has been selected.",
                "importPath": "pyswitch.clients.kemper.actions.bank_select_encoder"
            },
            {
                "name": "BANK_UP",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "dim_factor",
                        "default": "\"off\"",
                        "comment": "Can be \"off\", \"on\" or a value in range [0..1]"
                    },
                    {
                        "name": "led_brightness",
                        "default": "\"off\"",
                        "comment": "Can be \"off\", \"on\" or a value in range [0..1]"
                    },
                    {
                        "name": "text",
                        "default": "\"Bank up\"",
                        "comment": null
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Override color (if no color_callback is passed)"
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0."
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                        "comment": "Display mode (same as for RIG_SELECT, see definitions above)"
                    },
                    {
                        "name": "preselect",
                        "default": "False",
                        "comment": "Preselect mode. If enabled, the bank is only pre-selected, the change will only take effect when you select a rig next time."
                    },
                    {
                        "name": "max_bank",
                        "default": "None",
                        "comment": "Highest bank available. Only relevant if preselct is enabled."
                    }
                ],
                "comment": "Next bank (keeps rig index)",
                "importPath": "pyswitch.clients.kemper.actions.bank_up_down"
            },
            {
                "name": "BANK_DOWN",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": "Reference to a DisplayLabel"
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "dim_factor",
                        "default": "\"off\"",
                        "comment": "Can be \"off\", \"on\" or a value in range [0..1]"
                    },
                    {
                        "name": "led_brightness",
                        "default": "\"off\"",
                        "comment": "Can be \"off\", \"on\" or a value in range [0..1]"
                    },
                    {
                        "name": "text",
                        "default": "\"Bank dn\"",
                        "comment": null
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Override color (if no color_callback is passed)"
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0."
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                        "comment": "Display mode (same as for RIG_SELECT, see definitions above)"
                    },
                    {
                        "name": "preselect",
                        "default": "False",
                        "comment": "Preselect mode"
                    },
                    {
                        "name": "max_bank",
                        "default": "None",
                        "comment": "Highest bank available. Only relevant if preselct is enabled."
                    }
                ],
                "comment": "Previous bank (keeps rig index)",
                "importPath": "pyswitch.clients.kemper.actions.bank_up_down"
            },
            {
                "name": "EFFECT_STATE_EXT",
                "parameters": [
                    {
                        "name": "slot_id",
                        "default": null,
                        "comment": null
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "mode",
                        "default": "PushButtonAction.HOLD_MOMENTARY",
                        "comment": null
                    },
                    {
                        "name": "show_slot_names",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Switch an effect slot on / off. This variant has distinct names for each effect type. \n\n<b>Use with care:</b> This takes quite some RAM memory, so if you run a large configuration you might run into memory allocation failures. In this case, just use the normal Effect State action instead.",
                "importPath": "pyswitch.clients.kemper.actions.effect_state_extended_names"
            },
            {
                "name": "RIG_SELECT_AND_MORPH_STATE",
                "parameters": [
                    {
                        "name": "rig",
                        "default": null,
                        "comment": "Rig to select. Range: [1..5]"
                    },
                    {
                        "name": "rig_off",
                        "default": "None",
                        "comment": "If set, this defines the \"off\" rig chosen when the action is disabled. Set to \"auto\" to always remember the current rig as \"off\" rig"
                    },
                    {
                        "name": "bank",
                        "default": "None",
                        "comment": "If set, a specific bank is selected. If None, the current bank is kept"
                    },
                    {
                        "name": "bank_off",
                        "default": "None",
                        "comment": "If set, this defines the \"off\" bank to be chosen when the action is disabled. Set to \"auto\" to always remember the current bank as \"off\" bank"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Color override (if no text callback is passed)"
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0."
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": "Text override (if no text callback is passed)"
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_TARGET_RIG",
                        "comment": "Display mode (show color/text for current or target rig)"
                    },
                    {
                        "name": "morph_display",
                        "default": "None",
                        "comment": "Optional DisplayLabel to show morph color"
                    },
                    {
                        "name": "morph_use_leds",
                        "default": "True",
                        "comment": "Use the LEDs to show morph state?"
                    },
                    {
                        "name": "morph_id",
                        "default": "None",
                        "comment": "Separate ID for the morph action. Default is the same id as specified with the \"id\" parameter."
                    },
                    {
                        "name": "morph_only_when_enabled",
                        "default": "True",
                        "comment": "Only show the morph state when the \"on\" rig is selected"
                    },
                    {
                        "name": "morph_color_base",
                        "default": "Colors.RED",
                        "comment": "See MORPH_DISPLAY"
                    },
                    {
                        "name": "morph_color_morphed",
                        "default": "Colors.BLUE",
                        "comment": "See MORPH_DISPLAY"
                    },
                    {
                        "name": "rig_btn_morph",
                        "default": "False",
                        "comment": "If set True, second press will trigger toggling the internal morphing state (no command is sent, just the displays are toggled). Only if no rig_off or bank_off are specified."
                    },
                    {
                        "name": "momentary_morph",
                        "default": "False",
                        "comment": "If set true, the simulated morph state will operate in momentary mode. Use this if you have use momentary morph mode in your rigs."
                    }
                ],
                "comment": "Adds morph state display on one LED to the rig select action. The morph display will only be enabled when the rig in question is currently selected.",
                "importPath": "pyswitch.clients.kemper.actions.rig_select_and_morph_state"
            },
            {
                "name": "RIG_UP",
                "parameters": [
                    {
                        "name": "keep_bank",
                        "default": "True",
                        "comment": "If enabled, the bank is not changed when at the first and last rigs of a bank. If disabled, \nthe banks are stepped up/down after the last/first rigs of a bank."
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_TARGET_RIG",
                        "comment": "Display mode (see definitions above)"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Color override (if no text callback is passed)"
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0."
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": "Text override (if no text callback is passed)"
                    }
                ],
                "comment": "Select next rig",
                "importPath": "pyswitch.clients.kemper.actions.rig_up_down"
            },
            {
                "name": "RIG_DOWN",
                "parameters": [
                    {
                        "name": "keep_bank",
                        "default": "True",
                        "comment": "If enabled, the bank is not changed when at the first and last rigs of a bank. If disabled, \nthe banks are stepped up/down after the last/first rigs of a bank."
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_TARGET_RIG",
                        "comment": "Display mode (see definitions above)"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Color override (if no text callback is passed)"
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0."
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": "Text override (if no text callback is passed)"
                    }
                ],
                "comment": "Select previous rig",
                "importPath": "pyswitch.clients.kemper.actions.rig_up_down"
            },
            {
                "name": "RIG_SELECT",
                "parameters": [
                    {
                        "name": "rig",
                        "default": null,
                        "comment": "Rig to select. Range: [1..5] or None to re-select the current rig. "
                    },
                    {
                        "name": "rig_off",
                        "default": "None",
                        "comment": "If set, this defines the \"off\" rig chosen when the action is disabled. Set to \"auto\" to always remember the current rig as \"off\" rig"
                    },
                    {
                        "name": "bank",
                        "default": "None",
                        "comment": "If set, a specific bank is selected. If None, the current bank is kept"
                    },
                    {
                        "name": "bank_off",
                        "default": "None",
                        "comment": "If set, this defines the \"off\" bank to be chosen when the action is disabled. Set to \"auto\" to always remember the current bank as \"off\" bank"
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                        "comment": "Display mode (show color/text for current or target rig)"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Footprint: def callback(action, bank, rig) -> (r, g, b) where bank and rig are int starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Color override (if no text callback is passed)"
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the text. Footprint: def callback(action, bank, rig) -> String where bank and rig are int starting from 0."
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": "Text override (if no text callback is passed)"
                    },
                    {
                        "name": "auto_exclude_rigs",
                        "default": "None",
                        "comment": "If rig_off is \"auto\", this can be filled with a tuple or list of rigs to exclude from \"remembering\" when disabled"
                    },
                    {
                        "name": "rig_btn_morph",
                        "default": "False",
                        "comment": "If set True, second press will trigger toggling the internal morphing state (no command is sent, just the displays are toggled). Only if no rig_off or bank_off are specified."
                    },
                    {
                        "name": "momentary_morph",
                        "default": "False",
                        "comment": "If set true, the simulated morph state will operate in momentary mode. Use this if you have use momentary morph mode in your rigs."
                    }
                ],
                "comment": "Selects a specific rig, or toggles between two rigs (if rig_off is also provided).",
                "importPath": "pyswitch.clients.kemper.actions.rig_select"
            },
            {
                "name": "TUNER_MODE",
                "parameters": [
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "mode",
                        "default": "PushButtonAction.HOLD_MOMENTARY",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "DEFAULT_SWITCH_COLOR",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"Tuner\"",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Switch tuner mode on / off",
                "importPath": "pyswitch.clients.kemper.actions.tuner"
            },
            {
                "name": "EFFECT_BUTTON",
                "parameters": [
                    {
                        "name": "num",
                        "default": null,
                        "comment": "Number of the Effect Button (1 to 4)"
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_GREEN",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "use_internal_state",
                        "default": "True",
                        "comment": "If enabled, the state of the display will be toggled no matter what the real status on the Kemper is (the Kemper sadly does not report the state at all). "
                    }
                ],
                "comment": "Effect Button I-IIII (set only). num must be a number (1 to 4).\n\n<b>NOTE:</b> The state of the display will be toggled no matter what the real status on the Kemper is (the Kemper sadly does not report the state at all). \nIf you dont want this behaviour, you can set \"use_internal_state = False\".",
                "importPath": "pyswitch.clients.kemper.actions.effect_button"
            },
            {
                "name": "BANK_SELECT",
                "parameters": [
                    {
                        "name": "bank",
                        "default": null,
                        "comment": "Bank to select. Banks are indexed starting from one, range: [1..126]."
                    },
                    {
                        "name": "bank_off",
                        "default": "None",
                        "comment": "\"off\" bank, to toggle between banks. Will be ignored when preselect is enabled."
                    },
                    {
                        "name": "preselect",
                        "default": "False",
                        "comment": "Preselect mode. If enabled, the bank is only pre-selected, the change will only take effect when you select a rig next time. Ignores the parameter \"bank_off\"."
                    },
                    {
                        "name": "display_mode",
                        "default": "RIG_SELECT_DISPLAY_CURRENT_RIG",
                        "comment": "Display mode"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": "Reference to a DisplayLabel"
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": "ID for paging / enable callbacks"
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": "Use the switch LEDs"
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": "Optional callback to enable/disable the action depeinding on things"
                    },
                    {
                        "name": "color_callback",
                        "default": "None",
                        "comment": "Optional callback for setting the color. Scheme: \ndef callback(action, bank, rig) -> (r, g, b) where bank and rig are integers starting from 0."
                    },
                    {
                        "name": "color",
                        "default": "None",
                        "comment": "Static color (if no color callback is passed)"
                    },
                    {
                        "name": "text_callback",
                        "default": "None",
                        "comment": "Callback for setting the text. Scheme: \ndef callback(action, bank, rig) -> String where bank and rig are integers starting from 0."
                    },
                    {
                        "name": "text",
                        "default": "None",
                        "comment": "Static text (if no text callback is passed)"
                    }
                ],
                "comment": "Selects a specific bank, keeping the current rig, or toggles between two banks (if bank_off is also provided). ",
                "importPath": "pyswitch.clients.kemper.actions.bank_select"
            }
        ]
    },
    {
        "client": "local",
        "actions": [
            {
                "name": "ENCODER_BUTTON",
                "parameters": [
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "This simple action is used in conjunction with a rotary encoder: If you assign this to an encoder action using its \"accept_action\" parameter, the encoder will not send any value until this switch is pushed.\n\nYou can also use this to cancel the preselection, see Encoder Action's parameter \"cancel_action\".\n\nIt makes the most sense assigned to an encoder wheel's own pushbutton, but technically it can be assigned to any switch.",
                "importPath": "pyswitch.clients.local.actions.encoder_button"
            },
            {
                "name": "CUSTOM_MESSAGE",
                "parameters": [
                    {
                        "name": "message",
                        "default": null,
                        "comment": "Raw MIDI message bytes (as list, for example [176, 80, 0] for a control change). You can use hex values in format 0xab, too."
                    },
                    {
                        "name": "message_release",
                        "default": "None",
                        "comment": "Raw MIDI message to be sent on releasing the button (default: None)"
                    },
                    {
                        "name": "text",
                        "default": "\"\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.WHITE",
                        "comment": null
                    },
                    {
                        "name": "led_brightness",
                        "default": "0.15",
                        "comment": "LED brighness in range [0..1]"
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Sends a raw, arbitrary MIDI message.\n\nThe messages have to be raw bytes, so don't forget to also add the status and (in case of SysEx) closing bytes!",
                "importPath": "pyswitch.clients.local.actions.custom"
            },
            {
                "name": "PARAMETER_UP_DOWN",
                "parameters": [
                    {
                        "name": "mapping",
                        "default": null,
                        "comment": null
                    },
                    {
                        "name": "offset",
                        "default": null,
                        "comment": "Offset to be added to the parameter value. The range for this depends on whether the mapping's set message is a SysEx ([0..16383]) or ControlChange ([0..127])."
                    },
                    {
                        "name": "repeat_interval_millis",
                        "default": "200",
                        "comment": "If set to a value different than 0 or None, the action is repeated when the switch is held down (only works if the action is not in a \"hold\" position). Also note that this cannot be faster than the general update period which is set to 200ms per default."
                    },
                    {
                        "name": "max_value",
                        "default": "None",
                        "comment": "Max. value. If None, this is derived automatically from the mapping (SysEx: 16383, CC: 127)."
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": "Display label to show the value and color."
                    },
                    {
                        "name": "change_display",
                        "default": "None",
                        "comment": "Can be assigned to an additonal display label which is used to show the changed values for a period of time."
                    },
                    {
                        "name": "change_timeout_millis",
                        "default": "1500",
                        "comment": "Amount of time the value is shown in the change display, if change_display is set."
                    },
                    {
                        "name": "text",
                        "default": "\"{val}%\"",
                        "comment": "Text for the main display parameter's label. Can contain {val} which will be replaced with the current parameter value (percentage in range [0..100])"
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_GREEN",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "led_brightness",
                        "default": "0.3",
                        "comment": "LED brightness for max value"
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Can be used for all parameter mappings: Increases or decreases the parameter value by a given offset. \n\nOptionally, the current value can be shown in a display label, and/or be previewed in another display label (the rig name for example).",
                "importPath": "pyswitch.clients.local.actions.param_change"
            },
            {
                "name": "HID_KEYBOARD",
                "parameters": [
                    {
                        "name": "keycodes",
                        "default": null,
                        "comment": "Key code(s) to send. Can be either a single key code or a list/tuple of key codes. \nSearch \"adafruit_hid.keycode\" for available key codes, for example Keycode.LEFT_ARROW."
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"\"",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.LIGHT_BLUE",
                        "comment": null
                    },
                    {
                        "name": "led_brightness",
                        "default": "0.15",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "Sends a HID (Human Interface Device) command which emulates an USB keyboard. \n\nWith this, the controller can work as an USB page turner for example.",
                "importPath": "pyswitch.clients.local.actions.hid"
            },
            {
                "name": "BINARY_SWITCH",
                "parameters": [
                    {
                        "name": "mapping",
                        "default": null,
                        "comment": null
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "text",
                        "default": "\"\"",
                        "comment": null
                    },
                    {
                        "name": "mode",
                        "default": "PushButtonAction.HOLD_MOMENTARY",
                        "comment": null
                    },
                    {
                        "name": "color",
                        "default": "Colors.WHITE",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "False",
                        "comment": null
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "value_on",
                        "default": "1",
                        "comment": null
                    },
                    {
                        "name": "value_off",
                        "default": "0",
                        "comment": null
                    },
                    {
                        "name": "reference_value",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "comparison_mode",
                        "default": "BinaryParameterCallback.GREATER_EQUAL",
                        "comment": null
                    }
                ],
                "comment": "Generic switch action which can be used for all parameter mappings",
                "importPath": "pyswitch.clients.local.actions.binary_switch"
            }
        ]
    },
    {
        "client": "local",
        "actions": [
            {
                "type": "function",
                "name": "AnalogAction",
                "parameters": [
                    {
                        "name": "mapping",
                        "default": null,
                        "comment": "Parameter mapping to be controlled"
                    },
                    {
                        "name": "max_frame_rate",
                        "default": "24",
                        "comment": "Maximum frame rate for sending MIDI values (fps)"
                    },
                    {
                        "name": "max_value",
                        "default": "None",
                        "comment": "Maximum value of the mapping (16383 for NRPN, 127 for CC) Set this to None to auto-detect these ranges."
                    },
                    {
                        "name": "num_steps",
                        "default": "128",
                        "comment": "Number of steps to be regarded as different (saves MIDI traffic at the cost of precision)."
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": "Callback to set enabled state (optional). Must contain an enabled(action) function."
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "auto_calibrate",
                        "default": "True",
                        "comment": "Auto-calibrate (similar to Kemper devices)"
                    },
                    {
                        "name": "cal_min_window",
                        "default": "0.25",
                        "comment": "Minimum calibration range in percent [0..1]. A value of 0.25 means that the pedal has to cover at least 25% of the full range to be regarded."
                    },
                    {
                        "name": "transfer_function",
                        "default": "None",
                        "comment": "Transfer function. Input is the raw encoder value in range [0..65535]. Must return the value to be sent for \nthe mapping, in its range. If used, this disables the num_steps and max_value parameters.\n\nNOTE: When designing your transfer function, take care that the output values do not change too often as this \nimposes performance issues!"
                    },
                    {
                        "name": "change_display",
                        "default": "None",
                        "comment": "If assigned, the adjusted value will be displayed in the passed DisplayLabel when the pedal is adjusted. "
                    },
                    {
                        "name": "change_timeout_millis",
                        "default": "1500",
                        "comment": "This is the amount of time (milliseconds) after which the preview display will return to its normal state."
                    },
                    {
                        "name": "convert_value",
                        "default": "None",
                        "comment": "Optional conversion routine for displaying values: (value) => string"
                    }
                ],
                "comment": "Use this action for all analog inputs like expression pedals.",
                "importPath": "pyswitch.controller.actions.AnalogAction",
                "importName": "AnalogAction"
            },
            {
                "type": "function",
                "name": "EncoderAction",
                "parameters": [
                    {
                        "name": "mapping",
                        "default": null,
                        "comment": "Parameter mapping to be controlled"
                    },
                    {
                        "name": "min_value",
                        "default": "0",
                        "comment": "Minimum value of the mapping"
                    },
                    {
                        "name": "max_value",
                        "default": "None",
                        "comment": "Maximum value of the mapping (set to None for auto-detect: 16383 for NRPN, 127 for CC)"
                    },
                    {
                        "name": "step_width",
                        "default": "None",
                        "comment": "Increment/Decrement for one encoder step. Set to None for auto-detect (NRPN: 80, CC: 1). Can be set to any value greater than 0 (including float values)."
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": "Callback to set enabled state (optional). Must contain an enabled(action) function."
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "accept_action",
                        "default": "None",
                        "comment": "Action to acknowledge the entered value. If None, the encoder directly sets values as you turn it. \nIf you pass an Encoder Button action, the value will just be displayed and the MIDI command to set \nit will be sent when the Button action is triggered.\n\nIf you use this, you will also need a preview display label (see below)"
                    },
                    {
                        "name": "cancel_action",
                        "default": "None",
                        "comment": "Action to cancel a preselection (only makes sense with accept_action set). Must also be of type Encoder Button."
                    },
                    {
                        "name": "preview_display",
                        "default": "None",
                        "comment": "If assigned, the adjusted value will be displayed in the passed DisplayLabel when the encoder is adjusted. \nThis just makes sense in conjunction with an accept action (see above)."
                    },
                    {
                        "name": "preview_timeout_millis",
                        "default": "1500",
                        "comment": "This is the amount of time (milliseconds) after which the preview display will return to its normal state."
                    },
                    {
                        "name": "preview_blink_period_millis",
                        "default": "400",
                        "comment": "Blink period for preview (if an accept action is set)"
                    },
                    {
                        "name": "preview_blink_color",
                        "default": "(200, 200, 200)",
                        "comment": "Alternative color to be used when blinking."
                    },
                    {
                        "name": "preview_reset_mapping",
                        "default": "None",
                        "comment": "A parameter mapping (optional) which will be tracked. If the value changes, the preselect mode will be reset."
                    },
                    {
                        "name": "convert_value",
                        "default": "None",
                        "comment": "Optional conversion routine for displaying values: (value) => string"
                    }
                ],
                "comment": "Use this action for all rotary encoders like wheels. The push-down switch of the encoder is \nnot addressed here: This is represented as a separate switch, and can be linked to the same actions as a normal foot switch.",
                "importPath": "pyswitch.controller.actions.EncoderAction",
                "importName": "EncoderAction"
            },
            {
                "type": "function",
                "name": "PagerAction",
                "parameters": [
                    {
                        "name": "pages",
                        "default": null,
                        "comment": "This has to be a list of dicts like follows:\n{\n     \"id\": Page ID. All actions with this ID will be enabled\n     \"color\": Page color. LEDs and label will be colored this way (for the brightness, there is a separate parameter)\n     \"text\": Label text for the page\n}"
                    },
                    {
                        "name": "select_page",
                        "default": "None",
                        "comment": "If None, the pages will be rotated. If set to a page ID, the action will select the passed page (use a \n\"Select Page\" action for directly selecting the other pages)"
                    },
                    {
                        "name": "led_brightness",
                        "default": "0.15",
                        "comment": "LED brightness for the pager in range [0..1]. Only used when selet_page is None (rotate mode)."
                    },
                    {
                        "name": "led_brightness_off",
                        "default": "0.02",
                        "comment": "LED brightness for the pager when select_page is set and the page is not currently selected. Range [0..1]."
                    },
                    {
                        "name": "led_brightness_on",
                        "default": "0.3",
                        "comment": "LED brightness for the pager when select_page is set and the page is currently selected. Range [0..1]."
                    },
                    {
                        "name": "mappings",
                        "default": "[]",
                        "comment": "List of mappings the paging depends on (optional)"
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "display",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "The PagerAction is used to control multiple other actions to provide paging. Define this action for one switch which will by default rotate through the defined pages.\nFor the actions you want to be part of pages, just assign them using the paging buttons (which will set the id and enable_callback parameters for you).\nAlso, it is possible to have more than one pager in a configuration.\n\n<b>Rotate Through Pages:</b>\nIf you want to rotate through pages, just use this action with select_page set to None, which is the default. The switch will then rotate through the pages. \n\n<b>Directly Select Pages:</b>\nIf you want to have one switch dedicated to select each page, set select_page here to the page you want to select with the switch this pager is assigned to, and use the \"Select Page\" action (assigned to this pager) for the other switches to select the further pages directly.",
                "importPath": "pyswitch.clients.local.actions.pager",
                "importName": "PagerAction"
            },
            {
                "type": "function",
                "name": "PagerAction.proxy",
                "parameters": [
                    {
                        "name": "page_id",
                        "default": null,
                        "comment": "Sets the page to be selected with this action"
                    },
                    {
                        "name": "use_leds",
                        "default": "True",
                        "comment": null
                    },
                    {
                        "name": "id",
                        "default": "None",
                        "comment": null
                    },
                    {
                        "name": "enable_callback",
                        "default": "None",
                        "comment": null
                    }
                ],
                "comment": "This controls a Pager Action from another switch, making it possible to directly select pages with dedicated switches.\n\nYou always need to have a Pager Action which defines the pages, which also MUST be assigned to a switch. Set \"select_page\" on this pager to the first page, and for selecting the other pages, create \"Select Page\" actions for other switches. For example, to have 3 pages and 3 switches:\n<ul>\n    <li>Switch 1: Pager Action with \"select_page\" set to the first page</li>\n    <li>Switch 2: Select Page action set to page 2</li>\n    <li>Switch 3: Select Page action set to page 3</li>\n</ul>\nThe LED and display brightness settings are determined from the connected pager and can be set there if needed.",
                "importPath": "pyswitch.clients.local.actions.pager",
                "importName": "PagerAction"
            }
        ]
    }
]